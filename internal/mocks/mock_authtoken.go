// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"time"

	mock "github.com/stretchr/testify/mock"
)

// NewMockAuthToken creates a new instance of MockAuthToken. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAuthToken(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAuthToken {
	mock := &MockAuthToken{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockAuthToken is an autogenerated mock type for the AuthToken type
type MockAuthToken struct {
	mock.Mock
}

type MockAuthToken_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAuthToken) EXPECT() *MockAuthToken_Expecter {
	return &MockAuthToken_Expecter{mock: &_m.Mock}
}

// ExpiresAt provides a mock function for the type MockAuthToken
func (_mock *MockAuthToken) ExpiresAt() time.Time {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for ExpiresAt")
	}

	var r0 time.Time
	if returnFunc, ok := ret.Get(0).(func() time.Time); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(time.Time)
	}
	return r0
}

// MockAuthToken_ExpiresAt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExpiresAt'
type MockAuthToken_ExpiresAt_Call struct {
	*mock.Call
}

// ExpiresAt is a helper method to define mock.On call
func (_e *MockAuthToken_Expecter) ExpiresAt() *MockAuthToken_ExpiresAt_Call {
	return &MockAuthToken_ExpiresAt_Call{Call: _e.mock.On("ExpiresAt")}
}

func (_c *MockAuthToken_ExpiresAt_Call) Run(run func()) *MockAuthToken_ExpiresAt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockAuthToken_ExpiresAt_Call) Return(time1 time.Time) *MockAuthToken_ExpiresAt_Call {
	_c.Call.Return(time1)
	return _c
}

func (_c *MockAuthToken_ExpiresAt_Call) RunAndReturn(run func() time.Time) *MockAuthToken_ExpiresAt_Call {
	_c.Call.Return(run)
	return _c
}

// IsValid provides a mock function for the type MockAuthToken
func (_mock *MockAuthToken) IsValid() bool {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsValid")
	}

	var r0 bool
	if returnFunc, ok := ret.Get(0).(func() bool); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(bool)
	}
	return r0
}

// MockAuthToken_IsValid_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsValid'
type MockAuthToken_IsValid_Call struct {
	*mock.Call
}

// IsValid is a helper method to define mock.On call
func (_e *MockAuthToken_Expecter) IsValid() *MockAuthToken_IsValid_Call {
	return &MockAuthToken_IsValid_Call{Call: _e.mock.On("IsValid")}
}

func (_c *MockAuthToken_IsValid_Call) Run(run func()) *MockAuthToken_IsValid_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockAuthToken_IsValid_Call) Return(b bool) *MockAuthToken_IsValid_Call {
	_c.Call.Return(b)
	return _c
}

func (_c *MockAuthToken_IsValid_Call) RunAndReturn(run func() bool) *MockAuthToken_IsValid_Call {
	_c.Call.Return(run)
	return _c
}

// Value provides a mock function for the type MockAuthToken
func (_mock *MockAuthToken) Value() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Value")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockAuthToken_Value_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Value'
type MockAuthToken_Value_Call struct {
	*mock.Call
}

// Value is a helper method to define mock.On call
func (_e *MockAuthToken_Expecter) Value() *MockAuthToken_Value_Call {
	return &MockAuthToken_Value_Call{Call: _e.mock.On("Value")}
}

func (_c *MockAuthToken_Value_Call) Run(run func()) *MockAuthToken_Value_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockAuthToken_Value_Call) Return(s string) *MockAuthToken_Value_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockAuthToken_Value_Call) RunAndReturn(run func() string) *MockAuthToken_Value_Call {
	_c.Call.Return(run)
	return _c
}
