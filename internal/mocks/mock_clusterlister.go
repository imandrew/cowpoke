// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"
	"cowpoke/internal/domain"

	mock "github.com/stretchr/testify/mock"
)

// NewMockClusterLister creates a new instance of MockClusterLister. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClusterLister(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClusterLister {
	mock := &MockClusterLister{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockClusterLister is an autogenerated mock type for the ClusterLister type
type MockClusterLister struct {
	mock.Mock
}

type MockClusterLister_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClusterLister) EXPECT() *MockClusterLister_Expecter {
	return &MockClusterLister_Expecter{mock: &_m.Mock}
}

// ListClusters provides a mock function for the type MockClusterLister
func (_mock *MockClusterLister) ListClusters(ctx context.Context, token domain.AuthToken, server domain.ConfigServer) ([]domain.Cluster, error) {
	ret := _mock.Called(ctx, token, server)

	if len(ret) == 0 {
		panic("no return value specified for ListClusters")
	}

	var r0 []domain.Cluster
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.AuthToken, domain.ConfigServer) ([]domain.Cluster, error)); ok {
		return returnFunc(ctx, token, server)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.AuthToken, domain.ConfigServer) []domain.Cluster); ok {
		r0 = returnFunc(ctx, token, server)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Cluster)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.AuthToken, domain.ConfigServer) error); ok {
		r1 = returnFunc(ctx, token, server)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClusterLister_ListClusters_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListClusters'
type MockClusterLister_ListClusters_Call struct {
	*mock.Call
}

// ListClusters is a helper method to define mock.On call
//   - ctx context.Context
//   - token domain.AuthToken
//   - server domain.ConfigServer
func (_e *MockClusterLister_Expecter) ListClusters(ctx interface{}, token interface{}, server interface{}) *MockClusterLister_ListClusters_Call {
	return &MockClusterLister_ListClusters_Call{Call: _e.mock.On("ListClusters", ctx, token, server)}
}

func (_c *MockClusterLister_ListClusters_Call) Run(run func(ctx context.Context, token domain.AuthToken, server domain.ConfigServer)) *MockClusterLister_ListClusters_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.AuthToken
		if args[1] != nil {
			arg1 = args[1].(domain.AuthToken)
		}
		var arg2 domain.ConfigServer
		if args[2] != nil {
			arg2 = args[2].(domain.ConfigServer)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockClusterLister_ListClusters_Call) Return(clusters []domain.Cluster, err error) *MockClusterLister_ListClusters_Call {
	_c.Call.Return(clusters, err)
	return _c
}

func (_c *MockClusterLister_ListClusters_Call) RunAndReturn(run func(ctx context.Context, token domain.AuthToken, server domain.ConfigServer) ([]domain.Cluster, error)) *MockClusterLister_ListClusters_Call {
	_c.Call.Return(run)
	return _c
}
