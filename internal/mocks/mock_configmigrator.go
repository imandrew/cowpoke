// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"
	"cowpoke/internal/domain"

	mock "github.com/stretchr/testify/mock"
)

// NewMockConfigMigrator creates a new instance of MockConfigMigrator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockConfigMigrator(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockConfigMigrator {
	mock := &MockConfigMigrator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockConfigMigrator is an autogenerated mock type for the ConfigMigrator type
type MockConfigMigrator struct {
	mock.Mock
}

type MockConfigMigrator_Expecter struct {
	mock *mock.Mock
}

func (_m *MockConfigMigrator) EXPECT() *MockConfigMigrator_Expecter {
	return &MockConfigMigrator_Expecter{mock: &_m.Mock}
}

// FixPermissionsPostMigration provides a mock function for the type MockConfigMigrator
func (_mock *MockConfigMigrator) FixPermissionsPostMigration(ctx context.Context, configPath string, fs domain.FileSystemAdapter) error {
	ret := _mock.Called(ctx, configPath, fs)

	if len(ret) == 0 {
		panic("no return value specified for FixPermissionsPostMigration")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, domain.FileSystemAdapter) error); ok {
		r0 = returnFunc(ctx, configPath, fs)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockConfigMigrator_FixPermissionsPostMigration_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FixPermissionsPostMigration'
type MockConfigMigrator_FixPermissionsPostMigration_Call struct {
	*mock.Call
}

// FixPermissionsPostMigration is a helper method to define mock.On call
//   - ctx context.Context
//   - configPath string
//   - fs domain.FileSystemAdapter
func (_e *MockConfigMigrator_Expecter) FixPermissionsPostMigration(ctx interface{}, configPath interface{}, fs interface{}) *MockConfigMigrator_FixPermissionsPostMigration_Call {
	return &MockConfigMigrator_FixPermissionsPostMigration_Call{Call: _e.mock.On("FixPermissionsPostMigration", ctx, configPath, fs)}
}

func (_c *MockConfigMigrator_FixPermissionsPostMigration_Call) Run(run func(ctx context.Context, configPath string, fs domain.FileSystemAdapter)) *MockConfigMigrator_FixPermissionsPostMigration_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 domain.FileSystemAdapter
		if args[2] != nil {
			arg2 = args[2].(domain.FileSystemAdapter)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockConfigMigrator_FixPermissionsPostMigration_Call) Return(err error) *MockConfigMigrator_FixPermissionsPostMigration_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockConfigMigrator_FixPermissionsPostMigration_Call) RunAndReturn(run func(ctx context.Context, configPath string, fs domain.FileSystemAdapter) error) *MockConfigMigrator_FixPermissionsPostMigration_Call {
	_c.Call.Return(run)
	return _c
}

// Migrate provides a mock function for the type MockConfigMigrator
func (_mock *MockConfigMigrator) Migrate(ctx context.Context, data []byte, currentVersion string) ([]domain.ConfigServer, bool, error) {
	ret := _mock.Called(ctx, data, currentVersion)

	if len(ret) == 0 {
		panic("no return value specified for Migrate")
	}

	var r0 []domain.ConfigServer
	var r1 bool
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []byte, string) ([]domain.ConfigServer, bool, error)); ok {
		return returnFunc(ctx, data, currentVersion)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, []byte, string) []domain.ConfigServer); ok {
		r0 = returnFunc(ctx, data, currentVersion)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.ConfigServer)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, []byte, string) bool); ok {
		r1 = returnFunc(ctx, data, currentVersion)
	} else {
		r1 = ret.Get(1).(bool)
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, []byte, string) error); ok {
		r2 = returnFunc(ctx, data, currentVersion)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockConfigMigrator_Migrate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Migrate'
type MockConfigMigrator_Migrate_Call struct {
	*mock.Call
}

// Migrate is a helper method to define mock.On call
//   - ctx context.Context
//   - data []byte
//   - currentVersion string
func (_e *MockConfigMigrator_Expecter) Migrate(ctx interface{}, data interface{}, currentVersion interface{}) *MockConfigMigrator_Migrate_Call {
	return &MockConfigMigrator_Migrate_Call{Call: _e.mock.On("Migrate", ctx, data, currentVersion)}
}

func (_c *MockConfigMigrator_Migrate_Call) Run(run func(ctx context.Context, data []byte, currentVersion string)) *MockConfigMigrator_Migrate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []byte
		if args[1] != nil {
			arg1 = args[1].([]byte)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockConfigMigrator_Migrate_Call) Return(configServers []domain.ConfigServer, b bool, err error) *MockConfigMigrator_Migrate_Call {
	_c.Call.Return(configServers, b, err)
	return _c
}

func (_c *MockConfigMigrator_Migrate_Call) RunAndReturn(run func(ctx context.Context, data []byte, currentVersion string) ([]domain.ConfigServer, bool, error)) *MockConfigMigrator_Migrate_Call {
	_c.Call.Return(run)
	return _c
}
