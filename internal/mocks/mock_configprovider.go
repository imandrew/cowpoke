// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	mock "github.com/stretchr/testify/mock"
)

// NewMockConfigProvider creates a new instance of MockConfigProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockConfigProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockConfigProvider {
	mock := &MockConfigProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockConfigProvider is an autogenerated mock type for the ConfigProvider type
type MockConfigProvider struct {
	mock.Mock
}

type MockConfigProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *MockConfigProvider) EXPECT() *MockConfigProvider_Expecter {
	return &MockConfigProvider_Expecter{mock: &_m.Mock}
}

// GetConfigPath provides a mock function for the type MockConfigProvider
func (_mock *MockConfigProvider) GetConfigPath() (string, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetConfigPath")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (string, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockConfigProvider_GetConfigPath_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetConfigPath'
type MockConfigProvider_GetConfigPath_Call struct {
	*mock.Call
}

// GetConfigPath is a helper method to define mock.On call
func (_e *MockConfigProvider_Expecter) GetConfigPath() *MockConfigProvider_GetConfigPath_Call {
	return &MockConfigProvider_GetConfigPath_Call{Call: _e.mock.On("GetConfigPath")}
}

func (_c *MockConfigProvider_GetConfigPath_Call) Run(run func()) *MockConfigProvider_GetConfigPath_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockConfigProvider_GetConfigPath_Call) Return(s string, err error) *MockConfigProvider_GetConfigPath_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockConfigProvider_GetConfigPath_Call) RunAndReturn(run func() (string, error)) *MockConfigProvider_GetConfigPath_Call {
	_c.Call.Return(run)
	return _c
}

// GetDefaultKubeconfigPath provides a mock function for the type MockConfigProvider
func (_mock *MockConfigProvider) GetDefaultKubeconfigPath() (string, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetDefaultKubeconfigPath")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (string, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockConfigProvider_GetDefaultKubeconfigPath_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDefaultKubeconfigPath'
type MockConfigProvider_GetDefaultKubeconfigPath_Call struct {
	*mock.Call
}

// GetDefaultKubeconfigPath is a helper method to define mock.On call
func (_e *MockConfigProvider_Expecter) GetDefaultKubeconfigPath() *MockConfigProvider_GetDefaultKubeconfigPath_Call {
	return &MockConfigProvider_GetDefaultKubeconfigPath_Call{Call: _e.mock.On("GetDefaultKubeconfigPath")}
}

func (_c *MockConfigProvider_GetDefaultKubeconfigPath_Call) Run(run func()) *MockConfigProvider_GetDefaultKubeconfigPath_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockConfigProvider_GetDefaultKubeconfigPath_Call) Return(s string, err error) *MockConfigProvider_GetDefaultKubeconfigPath_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockConfigProvider_GetDefaultKubeconfigPath_Call) RunAndReturn(run func() (string, error)) *MockConfigProvider_GetDefaultKubeconfigPath_Call {
	_c.Call.Return(run)
	return _c
}

// GetKubeconfigDir provides a mock function for the type MockConfigProvider
func (_mock *MockConfigProvider) GetKubeconfigDir() (string, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetKubeconfigDir")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (string, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockConfigProvider_GetKubeconfigDir_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetKubeconfigDir'
type MockConfigProvider_GetKubeconfigDir_Call struct {
	*mock.Call
}

// GetKubeconfigDir is a helper method to define mock.On call
func (_e *MockConfigProvider_Expecter) GetKubeconfigDir() *MockConfigProvider_GetKubeconfigDir_Call {
	return &MockConfigProvider_GetKubeconfigDir_Call{Call: _e.mock.On("GetKubeconfigDir")}
}

func (_c *MockConfigProvider_GetKubeconfigDir_Call) Run(run func()) *MockConfigProvider_GetKubeconfigDir_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockConfigProvider_GetKubeconfigDir_Call) Return(s string, err error) *MockConfigProvider_GetKubeconfigDir_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockConfigProvider_GetKubeconfigDir_Call) RunAndReturn(run func() (string, error)) *MockConfigProvider_GetKubeconfigDir_Call {
	_c.Call.Return(run)
	return _c
}
