// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"
	"cowpoke/internal/domain"

	mock "github.com/stretchr/testify/mock"
)

// NewMockConfigRepository creates a new instance of MockConfigRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockConfigRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockConfigRepository {
	mock := &MockConfigRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockConfigRepository is an autogenerated mock type for the ConfigRepository type
type MockConfigRepository struct {
	mock.Mock
}

type MockConfigRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockConfigRepository) EXPECT() *MockConfigRepository_Expecter {
	return &MockConfigRepository_Expecter{mock: &_m.Mock}
}

// AddServer provides a mock function for the type MockConfigRepository
func (_mock *MockConfigRepository) AddServer(ctx context.Context, server domain.ConfigServer) error {
	ret := _mock.Called(ctx, server)

	if len(ret) == 0 {
		panic("no return value specified for AddServer")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.ConfigServer) error); ok {
		r0 = returnFunc(ctx, server)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockConfigRepository_AddServer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddServer'
type MockConfigRepository_AddServer_Call struct {
	*mock.Call
}

// AddServer is a helper method to define mock.On call
//   - ctx context.Context
//   - server domain.ConfigServer
func (_e *MockConfigRepository_Expecter) AddServer(ctx interface{}, server interface{}) *MockConfigRepository_AddServer_Call {
	return &MockConfigRepository_AddServer_Call{Call: _e.mock.On("AddServer", ctx, server)}
}

func (_c *MockConfigRepository_AddServer_Call) Run(run func(ctx context.Context, server domain.ConfigServer)) *MockConfigRepository_AddServer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.ConfigServer
		if args[1] != nil {
			arg1 = args[1].(domain.ConfigServer)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockConfigRepository_AddServer_Call) Return(err error) *MockConfigRepository_AddServer_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockConfigRepository_AddServer_Call) RunAndReturn(run func(ctx context.Context, server domain.ConfigServer) error) *MockConfigRepository_AddServer_Call {
	_c.Call.Return(run)
	return _c
}

// GetServers provides a mock function for the type MockConfigRepository
func (_mock *MockConfigRepository) GetServers(ctx context.Context) ([]domain.ConfigServer, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetServers")
	}

	var r0 []domain.ConfigServer
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]domain.ConfigServer, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []domain.ConfigServer); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.ConfigServer)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockConfigRepository_GetServers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetServers'
type MockConfigRepository_GetServers_Call struct {
	*mock.Call
}

// GetServers is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockConfigRepository_Expecter) GetServers(ctx interface{}) *MockConfigRepository_GetServers_Call {
	return &MockConfigRepository_GetServers_Call{Call: _e.mock.On("GetServers", ctx)}
}

func (_c *MockConfigRepository_GetServers_Call) Run(run func(ctx context.Context)) *MockConfigRepository_GetServers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockConfigRepository_GetServers_Call) Return(configServers []domain.ConfigServer, err error) *MockConfigRepository_GetServers_Call {
	_c.Call.Return(configServers, err)
	return _c
}

func (_c *MockConfigRepository_GetServers_Call) RunAndReturn(run func(ctx context.Context) ([]domain.ConfigServer, error)) *MockConfigRepository_GetServers_Call {
	_c.Call.Return(run)
	return _c
}

// LoadConfig provides a mock function for the type MockConfigRepository
func (_mock *MockConfigRepository) LoadConfig(ctx context.Context) error {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for LoadConfig")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockConfigRepository_LoadConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LoadConfig'
type MockConfigRepository_LoadConfig_Call struct {
	*mock.Call
}

// LoadConfig is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockConfigRepository_Expecter) LoadConfig(ctx interface{}) *MockConfigRepository_LoadConfig_Call {
	return &MockConfigRepository_LoadConfig_Call{Call: _e.mock.On("LoadConfig", ctx)}
}

func (_c *MockConfigRepository_LoadConfig_Call) Run(run func(ctx context.Context)) *MockConfigRepository_LoadConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockConfigRepository_LoadConfig_Call) Return(err error) *MockConfigRepository_LoadConfig_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockConfigRepository_LoadConfig_Call) RunAndReturn(run func(ctx context.Context) error) *MockConfigRepository_LoadConfig_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveServer provides a mock function for the type MockConfigRepository
func (_mock *MockConfigRepository) RemoveServer(ctx context.Context, serverURL string) error {
	ret := _mock.Called(ctx, serverURL)

	if len(ret) == 0 {
		panic("no return value specified for RemoveServer")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, serverURL)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockConfigRepository_RemoveServer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveServer'
type MockConfigRepository_RemoveServer_Call struct {
	*mock.Call
}

// RemoveServer is a helper method to define mock.On call
//   - ctx context.Context
//   - serverURL string
func (_e *MockConfigRepository_Expecter) RemoveServer(ctx interface{}, serverURL interface{}) *MockConfigRepository_RemoveServer_Call {
	return &MockConfigRepository_RemoveServer_Call{Call: _e.mock.On("RemoveServer", ctx, serverURL)}
}

func (_c *MockConfigRepository_RemoveServer_Call) Run(run func(ctx context.Context, serverURL string)) *MockConfigRepository_RemoveServer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockConfigRepository_RemoveServer_Call) Return(err error) *MockConfigRepository_RemoveServer_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockConfigRepository_RemoveServer_Call) RunAndReturn(run func(ctx context.Context, serverURL string) error) *MockConfigRepository_RemoveServer_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveServerByID provides a mock function for the type MockConfigRepository
func (_mock *MockConfigRepository) RemoveServerByID(ctx context.Context, serverID string) error {
	ret := _mock.Called(ctx, serverID)

	if len(ret) == 0 {
		panic("no return value specified for RemoveServerByID")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, serverID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockConfigRepository_RemoveServerByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveServerByID'
type MockConfigRepository_RemoveServerByID_Call struct {
	*mock.Call
}

// RemoveServerByID is a helper method to define mock.On call
//   - ctx context.Context
//   - serverID string
func (_e *MockConfigRepository_Expecter) RemoveServerByID(ctx interface{}, serverID interface{}) *MockConfigRepository_RemoveServerByID_Call {
	return &MockConfigRepository_RemoveServerByID_Call{Call: _e.mock.On("RemoveServerByID", ctx, serverID)}
}

func (_c *MockConfigRepository_RemoveServerByID_Call) Run(run func(ctx context.Context, serverID string)) *MockConfigRepository_RemoveServerByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockConfigRepository_RemoveServerByID_Call) Return(err error) *MockConfigRepository_RemoveServerByID_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockConfigRepository_RemoveServerByID_Call) RunAndReturn(run func(ctx context.Context, serverID string) error) *MockConfigRepository_RemoveServerByID_Call {
	_c.Call.Return(run)
	return _c
}

// SaveConfig provides a mock function for the type MockConfigRepository
func (_mock *MockConfigRepository) SaveConfig(ctx context.Context) error {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for SaveConfig")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockConfigRepository_SaveConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveConfig'
type MockConfigRepository_SaveConfig_Call struct {
	*mock.Call
}

// SaveConfig is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockConfigRepository_Expecter) SaveConfig(ctx interface{}) *MockConfigRepository_SaveConfig_Call {
	return &MockConfigRepository_SaveConfig_Call{Call: _e.mock.On("SaveConfig", ctx)}
}

func (_c *MockConfigRepository_SaveConfig_Call) Run(run func(ctx context.Context)) *MockConfigRepository_SaveConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockConfigRepository_SaveConfig_Call) Return(err error) *MockConfigRepository_SaveConfig_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockConfigRepository_SaveConfig_Call) RunAndReturn(run func(ctx context.Context) error) *MockConfigRepository_SaveConfig_Call {
	_c.Call.Return(run)
	return _c
}
