// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"os"

	mock "github.com/stretchr/testify/mock"
)

// NewMockFileSystemAdapter creates a new instance of MockFileSystemAdapter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockFileSystemAdapter(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockFileSystemAdapter {
	mock := &MockFileSystemAdapter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockFileSystemAdapter is an autogenerated mock type for the FileSystemAdapter type
type MockFileSystemAdapter struct {
	mock.Mock
}

type MockFileSystemAdapter_Expecter struct {
	mock *mock.Mock
}

func (_m *MockFileSystemAdapter) EXPECT() *MockFileSystemAdapter_Expecter {
	return &MockFileSystemAdapter_Expecter{mock: &_m.Mock}
}

// Chmod provides a mock function for the type MockFileSystemAdapter
func (_mock *MockFileSystemAdapter) Chmod(path string, perm os.FileMode) error {
	ret := _mock.Called(path, perm)

	if len(ret) == 0 {
		panic("no return value specified for Chmod")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, os.FileMode) error); ok {
		r0 = returnFunc(path, perm)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockFileSystemAdapter_Chmod_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Chmod'
type MockFileSystemAdapter_Chmod_Call struct {
	*mock.Call
}

// Chmod is a helper method to define mock.On call
//   - path string
//   - perm os.FileMode
func (_e *MockFileSystemAdapter_Expecter) Chmod(path interface{}, perm interface{}) *MockFileSystemAdapter_Chmod_Call {
	return &MockFileSystemAdapter_Chmod_Call{Call: _e.mock.On("Chmod", path, perm)}
}

func (_c *MockFileSystemAdapter_Chmod_Call) Run(run func(path string, perm os.FileMode)) *MockFileSystemAdapter_Chmod_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 os.FileMode
		if args[1] != nil {
			arg1 = args[1].(os.FileMode)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockFileSystemAdapter_Chmod_Call) Return(err error) *MockFileSystemAdapter_Chmod_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockFileSystemAdapter_Chmod_Call) RunAndReturn(run func(path string, perm os.FileMode) error) *MockFileSystemAdapter_Chmod_Call {
	_c.Call.Return(run)
	return _c
}

// MkdirAll provides a mock function for the type MockFileSystemAdapter
func (_mock *MockFileSystemAdapter) MkdirAll(path string, perm os.FileMode) error {
	ret := _mock.Called(path, perm)

	if len(ret) == 0 {
		panic("no return value specified for MkdirAll")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, os.FileMode) error); ok {
		r0 = returnFunc(path, perm)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockFileSystemAdapter_MkdirAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MkdirAll'
type MockFileSystemAdapter_MkdirAll_Call struct {
	*mock.Call
}

// MkdirAll is a helper method to define mock.On call
//   - path string
//   - perm os.FileMode
func (_e *MockFileSystemAdapter_Expecter) MkdirAll(path interface{}, perm interface{}) *MockFileSystemAdapter_MkdirAll_Call {
	return &MockFileSystemAdapter_MkdirAll_Call{Call: _e.mock.On("MkdirAll", path, perm)}
}

func (_c *MockFileSystemAdapter_MkdirAll_Call) Run(run func(path string, perm os.FileMode)) *MockFileSystemAdapter_MkdirAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 os.FileMode
		if args[1] != nil {
			arg1 = args[1].(os.FileMode)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockFileSystemAdapter_MkdirAll_Call) Return(err error) *MockFileSystemAdapter_MkdirAll_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockFileSystemAdapter_MkdirAll_Call) RunAndReturn(run func(path string, perm os.FileMode) error) *MockFileSystemAdapter_MkdirAll_Call {
	_c.Call.Return(run)
	return _c
}

// ReadFile provides a mock function for the type MockFileSystemAdapter
func (_mock *MockFileSystemAdapter) ReadFile(path string) ([]byte, error) {
	ret := _mock.Called(path)

	if len(ret) == 0 {
		panic("no return value specified for ReadFile")
	}

	var r0 []byte
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) ([]byte, error)); ok {
		return returnFunc(path)
	}
	if returnFunc, ok := ret.Get(0).(func(string) []byte); ok {
		r0 = returnFunc(path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(path)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockFileSystemAdapter_ReadFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadFile'
type MockFileSystemAdapter_ReadFile_Call struct {
	*mock.Call
}

// ReadFile is a helper method to define mock.On call
//   - path string
func (_e *MockFileSystemAdapter_Expecter) ReadFile(path interface{}) *MockFileSystemAdapter_ReadFile_Call {
	return &MockFileSystemAdapter_ReadFile_Call{Call: _e.mock.On("ReadFile", path)}
}

func (_c *MockFileSystemAdapter_ReadFile_Call) Run(run func(path string)) *MockFileSystemAdapter_ReadFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockFileSystemAdapter_ReadFile_Call) Return(bytes []byte, err error) *MockFileSystemAdapter_ReadFile_Call {
	_c.Call.Return(bytes, err)
	return _c
}

func (_c *MockFileSystemAdapter_ReadFile_Call) RunAndReturn(run func(path string) ([]byte, error)) *MockFileSystemAdapter_ReadFile_Call {
	_c.Call.Return(run)
	return _c
}

// Remove provides a mock function for the type MockFileSystemAdapter
func (_mock *MockFileSystemAdapter) Remove(path string) error {
	ret := _mock.Called(path)

	if len(ret) == 0 {
		panic("no return value specified for Remove")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string) error); ok {
		r0 = returnFunc(path)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockFileSystemAdapter_Remove_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Remove'
type MockFileSystemAdapter_Remove_Call struct {
	*mock.Call
}

// Remove is a helper method to define mock.On call
//   - path string
func (_e *MockFileSystemAdapter_Expecter) Remove(path interface{}) *MockFileSystemAdapter_Remove_Call {
	return &MockFileSystemAdapter_Remove_Call{Call: _e.mock.On("Remove", path)}
}

func (_c *MockFileSystemAdapter_Remove_Call) Run(run func(path string)) *MockFileSystemAdapter_Remove_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockFileSystemAdapter_Remove_Call) Return(err error) *MockFileSystemAdapter_Remove_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockFileSystemAdapter_Remove_Call) RunAndReturn(run func(path string) error) *MockFileSystemAdapter_Remove_Call {
	_c.Call.Return(run)
	return _c
}

// Stat provides a mock function for the type MockFileSystemAdapter
func (_mock *MockFileSystemAdapter) Stat(path string) (os.FileInfo, error) {
	ret := _mock.Called(path)

	if len(ret) == 0 {
		panic("no return value specified for Stat")
	}

	var r0 os.FileInfo
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (os.FileInfo, error)); ok {
		return returnFunc(path)
	}
	if returnFunc, ok := ret.Get(0).(func(string) os.FileInfo); ok {
		r0 = returnFunc(path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(os.FileInfo)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(path)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockFileSystemAdapter_Stat_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stat'
type MockFileSystemAdapter_Stat_Call struct {
	*mock.Call
}

// Stat is a helper method to define mock.On call
//   - path string
func (_e *MockFileSystemAdapter_Expecter) Stat(path interface{}) *MockFileSystemAdapter_Stat_Call {
	return &MockFileSystemAdapter_Stat_Call{Call: _e.mock.On("Stat", path)}
}

func (_c *MockFileSystemAdapter_Stat_Call) Run(run func(path string)) *MockFileSystemAdapter_Stat_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockFileSystemAdapter_Stat_Call) Return(v os.FileInfo, err error) *MockFileSystemAdapter_Stat_Call {
	_c.Call.Return(v, err)
	return _c
}

func (_c *MockFileSystemAdapter_Stat_Call) RunAndReturn(run func(path string) (os.FileInfo, error)) *MockFileSystemAdapter_Stat_Call {
	_c.Call.Return(run)
	return _c
}

// TempDir provides a mock function for the type MockFileSystemAdapter
func (_mock *MockFileSystemAdapter) TempDir() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for TempDir")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockFileSystemAdapter_TempDir_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TempDir'
type MockFileSystemAdapter_TempDir_Call struct {
	*mock.Call
}

// TempDir is a helper method to define mock.On call
func (_e *MockFileSystemAdapter_Expecter) TempDir() *MockFileSystemAdapter_TempDir_Call {
	return &MockFileSystemAdapter_TempDir_Call{Call: _e.mock.On("TempDir")}
}

func (_c *MockFileSystemAdapter_TempDir_Call) Run(run func()) *MockFileSystemAdapter_TempDir_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockFileSystemAdapter_TempDir_Call) Return(s string) *MockFileSystemAdapter_TempDir_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockFileSystemAdapter_TempDir_Call) RunAndReturn(run func() string) *MockFileSystemAdapter_TempDir_Call {
	_c.Call.Return(run)
	return _c
}

// UserHomeDir provides a mock function for the type MockFileSystemAdapter
func (_mock *MockFileSystemAdapter) UserHomeDir() (string, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for UserHomeDir")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (string, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockFileSystemAdapter_UserHomeDir_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UserHomeDir'
type MockFileSystemAdapter_UserHomeDir_Call struct {
	*mock.Call
}

// UserHomeDir is a helper method to define mock.On call
func (_e *MockFileSystemAdapter_Expecter) UserHomeDir() *MockFileSystemAdapter_UserHomeDir_Call {
	return &MockFileSystemAdapter_UserHomeDir_Call{Call: _e.mock.On("UserHomeDir")}
}

func (_c *MockFileSystemAdapter_UserHomeDir_Call) Run(run func()) *MockFileSystemAdapter_UserHomeDir_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockFileSystemAdapter_UserHomeDir_Call) Return(s string, err error) *MockFileSystemAdapter_UserHomeDir_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockFileSystemAdapter_UserHomeDir_Call) RunAndReturn(run func() (string, error)) *MockFileSystemAdapter_UserHomeDir_Call {
	_c.Call.Return(run)
	return _c
}

// WriteFile provides a mock function for the type MockFileSystemAdapter
func (_mock *MockFileSystemAdapter) WriteFile(path string, data []byte, perm os.FileMode) error {
	ret := _mock.Called(path, data, perm)

	if len(ret) == 0 {
		panic("no return value specified for WriteFile")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, []byte, os.FileMode) error); ok {
		r0 = returnFunc(path, data, perm)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockFileSystemAdapter_WriteFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WriteFile'
type MockFileSystemAdapter_WriteFile_Call struct {
	*mock.Call
}

// WriteFile is a helper method to define mock.On call
//   - path string
//   - data []byte
//   - perm os.FileMode
func (_e *MockFileSystemAdapter_Expecter) WriteFile(path interface{}, data interface{}, perm interface{}) *MockFileSystemAdapter_WriteFile_Call {
	return &MockFileSystemAdapter_WriteFile_Call{Call: _e.mock.On("WriteFile", path, data, perm)}
}

func (_c *MockFileSystemAdapter_WriteFile_Call) Run(run func(path string, data []byte, perm os.FileMode)) *MockFileSystemAdapter_WriteFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 []byte
		if args[1] != nil {
			arg1 = args[1].([]byte)
		}
		var arg2 os.FileMode
		if args[2] != nil {
			arg2 = args[2].(os.FileMode)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockFileSystemAdapter_WriteFile_Call) Return(err error) *MockFileSystemAdapter_WriteFile_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockFileSystemAdapter_WriteFile_Call) RunAndReturn(run func(path string, data []byte, perm os.FileMode) error) *MockFileSystemAdapter_WriteFile_Call {
	_c.Call.Return(run)
	return _c
}
