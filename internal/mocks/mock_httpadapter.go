// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"
	"net/http"

	mock "github.com/stretchr/testify/mock"
)

// NewMockHTTPAdapter creates a new instance of MockHTTPAdapter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockHTTPAdapter(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockHTTPAdapter {
	mock := &MockHTTPAdapter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockHTTPAdapter is an autogenerated mock type for the HTTPAdapter type
type MockHTTPAdapter struct {
	mock.Mock
}

type MockHTTPAdapter_Expecter struct {
	mock *mock.Mock
}

func (_m *MockHTTPAdapter) EXPECT() *MockHTTPAdapter_Expecter {
	return &MockHTTPAdapter_Expecter{mock: &_m.Mock}
}

// Get provides a mock function for the type MockHTTPAdapter
func (_mock *MockHTTPAdapter) Get(ctx context.Context, url string) (*http.Response, error) {
	ret := _mock.Called(ctx, url)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *http.Response
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*http.Response, error)); ok {
		return returnFunc(ctx, url)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *http.Response); ok {
		r0 = returnFunc(ctx, url)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, url)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockHTTPAdapter_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockHTTPAdapter_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - url string
func (_e *MockHTTPAdapter_Expecter) Get(ctx interface{}, url interface{}) *MockHTTPAdapter_Get_Call {
	return &MockHTTPAdapter_Get_Call{Call: _e.mock.On("Get", ctx, url)}
}

func (_c *MockHTTPAdapter_Get_Call) Run(run func(ctx context.Context, url string)) *MockHTTPAdapter_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockHTTPAdapter_Get_Call) Return(response *http.Response, err error) *MockHTTPAdapter_Get_Call {
	_c.Call.Return(response, err)
	return _c
}

func (_c *MockHTTPAdapter_Get_Call) RunAndReturn(run func(ctx context.Context, url string) (*http.Response, error)) *MockHTTPAdapter_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetWithAuth provides a mock function for the type MockHTTPAdapter
func (_mock *MockHTTPAdapter) GetWithAuth(ctx context.Context, url string, token string) (*http.Response, error) {
	ret := _mock.Called(ctx, url, token)

	if len(ret) == 0 {
		panic("no return value specified for GetWithAuth")
	}

	var r0 *http.Response
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) (*http.Response, error)); ok {
		return returnFunc(ctx, url, token)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) *http.Response); ok {
		r0 = returnFunc(ctx, url, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = returnFunc(ctx, url, token)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockHTTPAdapter_GetWithAuth_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWithAuth'
type MockHTTPAdapter_GetWithAuth_Call struct {
	*mock.Call
}

// GetWithAuth is a helper method to define mock.On call
//   - ctx context.Context
//   - url string
//   - token string
func (_e *MockHTTPAdapter_Expecter) GetWithAuth(ctx interface{}, url interface{}, token interface{}) *MockHTTPAdapter_GetWithAuth_Call {
	return &MockHTTPAdapter_GetWithAuth_Call{Call: _e.mock.On("GetWithAuth", ctx, url, token)}
}

func (_c *MockHTTPAdapter_GetWithAuth_Call) Run(run func(ctx context.Context, url string, token string)) *MockHTTPAdapter_GetWithAuth_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockHTTPAdapter_GetWithAuth_Call) Return(response *http.Response, err error) *MockHTTPAdapter_GetWithAuth_Call {
	_c.Call.Return(response, err)
	return _c
}

func (_c *MockHTTPAdapter_GetWithAuth_Call) RunAndReturn(run func(ctx context.Context, url string, token string) (*http.Response, error)) *MockHTTPAdapter_GetWithAuth_Call {
	_c.Call.Return(run)
	return _c
}

// Post provides a mock function for the type MockHTTPAdapter
func (_mock *MockHTTPAdapter) Post(ctx context.Context, url string, payload any) (*http.Response, error) {
	ret := _mock.Called(ctx, url, payload)

	if len(ret) == 0 {
		panic("no return value specified for Post")
	}

	var r0 *http.Response
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, any) (*http.Response, error)); ok {
		return returnFunc(ctx, url, payload)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, any) *http.Response); ok {
		r0 = returnFunc(ctx, url, payload)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, any) error); ok {
		r1 = returnFunc(ctx, url, payload)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockHTTPAdapter_Post_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Post'
type MockHTTPAdapter_Post_Call struct {
	*mock.Call
}

// Post is a helper method to define mock.On call
//   - ctx context.Context
//   - url string
//   - payload any
func (_e *MockHTTPAdapter_Expecter) Post(ctx interface{}, url interface{}, payload interface{}) *MockHTTPAdapter_Post_Call {
	return &MockHTTPAdapter_Post_Call{Call: _e.mock.On("Post", ctx, url, payload)}
}

func (_c *MockHTTPAdapter_Post_Call) Run(run func(ctx context.Context, url string, payload any)) *MockHTTPAdapter_Post_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 any
		if args[2] != nil {
			arg2 = args[2].(any)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockHTTPAdapter_Post_Call) Return(response *http.Response, err error) *MockHTTPAdapter_Post_Call {
	_c.Call.Return(response, err)
	return _c
}

func (_c *MockHTTPAdapter_Post_Call) RunAndReturn(run func(ctx context.Context, url string, payload any) (*http.Response, error)) *MockHTTPAdapter_Post_Call {
	_c.Call.Return(run)
	return _c
}

// PostWithAuth provides a mock function for the type MockHTTPAdapter
func (_mock *MockHTTPAdapter) PostWithAuth(ctx context.Context, url string, token string, payload any) (*http.Response, error) {
	ret := _mock.Called(ctx, url, token, payload)

	if len(ret) == 0 {
		panic("no return value specified for PostWithAuth")
	}

	var r0 *http.Response
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, any) (*http.Response, error)); ok {
		return returnFunc(ctx, url, token, payload)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, any) *http.Response); ok {
		r0 = returnFunc(ctx, url, token, payload)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, any) error); ok {
		r1 = returnFunc(ctx, url, token, payload)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockHTTPAdapter_PostWithAuth_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostWithAuth'
type MockHTTPAdapter_PostWithAuth_Call struct {
	*mock.Call
}

// PostWithAuth is a helper method to define mock.On call
//   - ctx context.Context
//   - url string
//   - token string
//   - payload any
func (_e *MockHTTPAdapter_Expecter) PostWithAuth(ctx interface{}, url interface{}, token interface{}, payload interface{}) *MockHTTPAdapter_PostWithAuth_Call {
	return &MockHTTPAdapter_PostWithAuth_Call{Call: _e.mock.On("PostWithAuth", ctx, url, token, payload)}
}

func (_c *MockHTTPAdapter_PostWithAuth_Call) Run(run func(ctx context.Context, url string, token string, payload any)) *MockHTTPAdapter_PostWithAuth_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 any
		if args[3] != nil {
			arg3 = args[3].(any)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockHTTPAdapter_PostWithAuth_Call) Return(response *http.Response, err error) *MockHTTPAdapter_PostWithAuth_Call {
	_c.Call.Return(response, err)
	return _c
}

func (_c *MockHTTPAdapter_PostWithAuth_Call) RunAndReturn(run func(ctx context.Context, url string, token string, payload any) (*http.Response, error)) *MockHTTPAdapter_PostWithAuth_Call {
	_c.Call.Return(run)
	return _c
}
