// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	mock "github.com/stretchr/testify/mock"
)

// NewMockKubeconfigCleaner creates a new instance of MockKubeconfigCleaner. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockKubeconfigCleaner(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockKubeconfigCleaner {
	mock := &MockKubeconfigCleaner{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockKubeconfigCleaner is an autogenerated mock type for the KubeconfigCleaner type
type MockKubeconfigCleaner struct {
	mock.Mock
}

type MockKubeconfigCleaner_Expecter struct {
	mock *mock.Mock
}

func (_m *MockKubeconfigCleaner) EXPECT() *MockKubeconfigCleaner_Expecter {
	return &MockKubeconfigCleaner_Expecter{mock: &_m.Mock}
}

// CleanupTempFiles provides a mock function for the type MockKubeconfigCleaner
func (_mock *MockKubeconfigCleaner) CleanupTempFiles(ctx context.Context, paths []string) error {
	ret := _mock.Called(ctx, paths)

	if len(ret) == 0 {
		panic("no return value specified for CleanupTempFiles")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []string) error); ok {
		r0 = returnFunc(ctx, paths)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockKubeconfigCleaner_CleanupTempFiles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CleanupTempFiles'
type MockKubeconfigCleaner_CleanupTempFiles_Call struct {
	*mock.Call
}

// CleanupTempFiles is a helper method to define mock.On call
//   - ctx context.Context
//   - paths []string
func (_e *MockKubeconfigCleaner_Expecter) CleanupTempFiles(ctx interface{}, paths interface{}) *MockKubeconfigCleaner_CleanupTempFiles_Call {
	return &MockKubeconfigCleaner_CleanupTempFiles_Call{Call: _e.mock.On("CleanupTempFiles", ctx, paths)}
}

func (_c *MockKubeconfigCleaner_CleanupTempFiles_Call) Run(run func(ctx context.Context, paths []string)) *MockKubeconfigCleaner_CleanupTempFiles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []string
		if args[1] != nil {
			arg1 = args[1].([]string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockKubeconfigCleaner_CleanupTempFiles_Call) Return(err error) *MockKubeconfigCleaner_CleanupTempFiles_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockKubeconfigCleaner_CleanupTempFiles_Call) RunAndReturn(run func(ctx context.Context, paths []string) error) *MockKubeconfigCleaner_CleanupTempFiles_Call {
	_c.Call.Return(run)
	return _c
}
