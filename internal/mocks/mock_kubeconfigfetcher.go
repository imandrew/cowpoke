// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"
	"cowpoke/internal/domain"

	mock "github.com/stretchr/testify/mock"
)

// NewMockKubeconfigFetcher creates a new instance of MockKubeconfigFetcher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockKubeconfigFetcher(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockKubeconfigFetcher {
	mock := &MockKubeconfigFetcher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockKubeconfigFetcher is an autogenerated mock type for the KubeconfigFetcher type
type MockKubeconfigFetcher struct {
	mock.Mock
}

type MockKubeconfigFetcher_Expecter struct {
	mock *mock.Mock
}

func (_m *MockKubeconfigFetcher) EXPECT() *MockKubeconfigFetcher_Expecter {
	return &MockKubeconfigFetcher_Expecter{mock: &_m.Mock}
}

// GetKubeconfig provides a mock function for the type MockKubeconfigFetcher
func (_mock *MockKubeconfigFetcher) GetKubeconfig(ctx context.Context, token domain.AuthToken, server domain.ConfigServer, clusterID string) ([]byte, error) {
	ret := _mock.Called(ctx, token, server, clusterID)

	if len(ret) == 0 {
		panic("no return value specified for GetKubeconfig")
	}

	var r0 []byte
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.AuthToken, domain.ConfigServer, string) ([]byte, error)); ok {
		return returnFunc(ctx, token, server, clusterID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.AuthToken, domain.ConfigServer, string) []byte); ok {
		r0 = returnFunc(ctx, token, server, clusterID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.AuthToken, domain.ConfigServer, string) error); ok {
		r1 = returnFunc(ctx, token, server, clusterID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockKubeconfigFetcher_GetKubeconfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetKubeconfig'
type MockKubeconfigFetcher_GetKubeconfig_Call struct {
	*mock.Call
}

// GetKubeconfig is a helper method to define mock.On call
//   - ctx context.Context
//   - token domain.AuthToken
//   - server domain.ConfigServer
//   - clusterID string
func (_e *MockKubeconfigFetcher_Expecter) GetKubeconfig(ctx interface{}, token interface{}, server interface{}, clusterID interface{}) *MockKubeconfigFetcher_GetKubeconfig_Call {
	return &MockKubeconfigFetcher_GetKubeconfig_Call{Call: _e.mock.On("GetKubeconfig", ctx, token, server, clusterID)}
}

func (_c *MockKubeconfigFetcher_GetKubeconfig_Call) Run(run func(ctx context.Context, token domain.AuthToken, server domain.ConfigServer, clusterID string)) *MockKubeconfigFetcher_GetKubeconfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.AuthToken
		if args[1] != nil {
			arg1 = args[1].(domain.AuthToken)
		}
		var arg2 domain.ConfigServer
		if args[2] != nil {
			arg2 = args[2].(domain.ConfigServer)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockKubeconfigFetcher_GetKubeconfig_Call) Return(bytes []byte, err error) *MockKubeconfigFetcher_GetKubeconfig_Call {
	_c.Call.Return(bytes, err)
	return _c
}

func (_c *MockKubeconfigFetcher_GetKubeconfig_Call) RunAndReturn(run func(ctx context.Context, token domain.AuthToken, server domain.ConfigServer, clusterID string) ([]byte, error)) *MockKubeconfigFetcher_GetKubeconfig_Call {
	_c.Call.Return(run)
	return _c
}
