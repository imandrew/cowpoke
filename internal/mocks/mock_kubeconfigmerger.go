// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	mock "github.com/stretchr/testify/mock"
)

// NewMockKubeconfigMerger creates a new instance of MockKubeconfigMerger. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockKubeconfigMerger(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockKubeconfigMerger {
	mock := &MockKubeconfigMerger{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockKubeconfigMerger is an autogenerated mock type for the KubeconfigMerger type
type MockKubeconfigMerger struct {
	mock.Mock
}

type MockKubeconfigMerger_Expecter struct {
	mock *mock.Mock
}

func (_m *MockKubeconfigMerger) EXPECT() *MockKubeconfigMerger_Expecter {
	return &MockKubeconfigMerger_Expecter{mock: &_m.Mock}
}

// MergeKubeconfigs provides a mock function for the type MockKubeconfigMerger
func (_mock *MockKubeconfigMerger) MergeKubeconfigs(ctx context.Context, paths []string, outputPath string) error {
	ret := _mock.Called(ctx, paths, outputPath)

	if len(ret) == 0 {
		panic("no return value specified for MergeKubeconfigs")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []string, string) error); ok {
		r0 = returnFunc(ctx, paths, outputPath)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockKubeconfigMerger_MergeKubeconfigs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MergeKubeconfigs'
type MockKubeconfigMerger_MergeKubeconfigs_Call struct {
	*mock.Call
}

// MergeKubeconfigs is a helper method to define mock.On call
//   - ctx context.Context
//   - paths []string
//   - outputPath string
func (_e *MockKubeconfigMerger_Expecter) MergeKubeconfigs(ctx interface{}, paths interface{}, outputPath interface{}) *MockKubeconfigMerger_MergeKubeconfigs_Call {
	return &MockKubeconfigMerger_MergeKubeconfigs_Call{Call: _e.mock.On("MergeKubeconfigs", ctx, paths, outputPath)}
}

func (_c *MockKubeconfigMerger_MergeKubeconfigs_Call) Run(run func(ctx context.Context, paths []string, outputPath string)) *MockKubeconfigMerger_MergeKubeconfigs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []string
		if args[1] != nil {
			arg1 = args[1].([]string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockKubeconfigMerger_MergeKubeconfigs_Call) Return(err error) *MockKubeconfigMerger_MergeKubeconfigs_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockKubeconfigMerger_MergeKubeconfigs_Call) RunAndReturn(run func(ctx context.Context, paths []string, outputPath string) error) *MockKubeconfigMerger_MergeKubeconfigs_Call {
	_c.Call.Return(run)
	return _c
}
