// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"
	"cowpoke/internal/domain"

	mock "github.com/stretchr/testify/mock"
)

// NewMockKubeconfigSyncer creates a new instance of MockKubeconfigSyncer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockKubeconfigSyncer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockKubeconfigSyncer {
	mock := &MockKubeconfigSyncer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockKubeconfigSyncer is an autogenerated mock type for the KubeconfigSyncer type
type MockKubeconfigSyncer struct {
	mock.Mock
}

type MockKubeconfigSyncer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockKubeconfigSyncer) EXPECT() *MockKubeconfigSyncer_Expecter {
	return &MockKubeconfigSyncer_Expecter{mock: &_m.Mock}
}

// SyncAllServers provides a mock function for the type MockKubeconfigSyncer
func (_mock *MockKubeconfigSyncer) SyncAllServers(ctx context.Context, servers []domain.ConfigServer, passwords map[string]string) ([]string, error) {
	ret := _mock.Called(ctx, servers, passwords)

	if len(ret) == 0 {
		panic("no return value specified for SyncAllServers")
	}

	var r0 []string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []domain.ConfigServer, map[string]string) ([]string, error)); ok {
		return returnFunc(ctx, servers, passwords)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, []domain.ConfigServer, map[string]string) []string); ok {
		r0 = returnFunc(ctx, servers, passwords)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, []domain.ConfigServer, map[string]string) error); ok {
		r1 = returnFunc(ctx, servers, passwords)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockKubeconfigSyncer_SyncAllServers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SyncAllServers'
type MockKubeconfigSyncer_SyncAllServers_Call struct {
	*mock.Call
}

// SyncAllServers is a helper method to define mock.On call
//   - ctx context.Context
//   - servers []domain.ConfigServer
//   - passwords map[string]string
func (_e *MockKubeconfigSyncer_Expecter) SyncAllServers(ctx interface{}, servers interface{}, passwords interface{}) *MockKubeconfigSyncer_SyncAllServers_Call {
	return &MockKubeconfigSyncer_SyncAllServers_Call{Call: _e.mock.On("SyncAllServers", ctx, servers, passwords)}
}

func (_c *MockKubeconfigSyncer_SyncAllServers_Call) Run(run func(ctx context.Context, servers []domain.ConfigServer, passwords map[string]string)) *MockKubeconfigSyncer_SyncAllServers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []domain.ConfigServer
		if args[1] != nil {
			arg1 = args[1].([]domain.ConfigServer)
		}
		var arg2 map[string]string
		if args[2] != nil {
			arg2 = args[2].(map[string]string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockKubeconfigSyncer_SyncAllServers_Call) Return(strings []string, err error) *MockKubeconfigSyncer_SyncAllServers_Call {
	_c.Call.Return(strings, err)
	return _c
}

func (_c *MockKubeconfigSyncer_SyncAllServers_Call) RunAndReturn(run func(ctx context.Context, servers []domain.ConfigServer, passwords map[string]string) ([]string, error)) *MockKubeconfigSyncer_SyncAllServers_Call {
	_c.Call.Return(run)
	return _c
}
