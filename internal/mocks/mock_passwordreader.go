// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	mock "github.com/stretchr/testify/mock"
)

// NewMockPasswordReader creates a new instance of MockPasswordReader. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPasswordReader(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPasswordReader {
	mock := &MockPasswordReader{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockPasswordReader is an autogenerated mock type for the PasswordReader type
type MockPasswordReader struct {
	mock.Mock
}

type MockPasswordReader_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPasswordReader) EXPECT() *MockPasswordReader_Expecter {
	return &MockPasswordReader_Expecter{mock: &_m.Mock}
}

// IsInteractive provides a mock function for the type MockPasswordReader
func (_mock *MockPasswordReader) IsInteractive() bool {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsInteractive")
	}

	var r0 bool
	if returnFunc, ok := ret.Get(0).(func() bool); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(bool)
	}
	return r0
}

// MockPasswordReader_IsInteractive_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsInteractive'
type MockPasswordReader_IsInteractive_Call struct {
	*mock.Call
}

// IsInteractive is a helper method to define mock.On call
func (_e *MockPasswordReader_Expecter) IsInteractive() *MockPasswordReader_IsInteractive_Call {
	return &MockPasswordReader_IsInteractive_Call{Call: _e.mock.On("IsInteractive")}
}

func (_c *MockPasswordReader_IsInteractive_Call) Run(run func()) *MockPasswordReader_IsInteractive_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPasswordReader_IsInteractive_Call) Return(b bool) *MockPasswordReader_IsInteractive_Call {
	_c.Call.Return(b)
	return _c
}

func (_c *MockPasswordReader_IsInteractive_Call) RunAndReturn(run func() bool) *MockPasswordReader_IsInteractive_Call {
	_c.Call.Return(run)
	return _c
}

// ReadPassword provides a mock function for the type MockPasswordReader
func (_mock *MockPasswordReader) ReadPassword(ctx context.Context, prompt string) (string, error) {
	ret := _mock.Called(ctx, prompt)

	if len(ret) == 0 {
		panic("no return value specified for ReadPassword")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return returnFunc(ctx, prompt)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = returnFunc(ctx, prompt)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, prompt)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPasswordReader_ReadPassword_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadPassword'
type MockPasswordReader_ReadPassword_Call struct {
	*mock.Call
}

// ReadPassword is a helper method to define mock.On call
//   - ctx context.Context
//   - prompt string
func (_e *MockPasswordReader_Expecter) ReadPassword(ctx interface{}, prompt interface{}) *MockPasswordReader_ReadPassword_Call {
	return &MockPasswordReader_ReadPassword_Call{Call: _e.mock.On("ReadPassword", ctx, prompt)}
}

func (_c *MockPasswordReader_ReadPassword_Call) Run(run func(ctx context.Context, prompt string)) *MockPasswordReader_ReadPassword_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockPasswordReader_ReadPassword_Call) Return(s string, err error) *MockPasswordReader_ReadPassword_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockPasswordReader_ReadPassword_Call) RunAndReturn(run func(ctx context.Context, prompt string) (string, error)) *MockPasswordReader_ReadPassword_Call {
	_c.Call.Return(run)
	return _c
}
