// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"cowpoke/internal/domain"

	mock "github.com/stretchr/testify/mock"
)

// NewMockRancherServiceFactory creates a new instance of MockRancherServiceFactory. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRancherServiceFactory(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRancherServiceFactory {
	mock := &MockRancherServiceFactory{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockRancherServiceFactory is an autogenerated mock type for the RancherServiceFactory type
type MockRancherServiceFactory struct {
	mock.Mock
}

type MockRancherServiceFactory_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRancherServiceFactory) EXPECT() *MockRancherServiceFactory_Expecter {
	return &MockRancherServiceFactory_Expecter{mock: &_m.Mock}
}

// CreateInsecureServices provides a mock function for the type MockRancherServiceFactory
func (_mock *MockRancherServiceFactory) CreateInsecureServices(configProvider domain.ConfigProvider) domain.RancherServices {
	ret := _mock.Called(configProvider)

	if len(ret) == 0 {
		panic("no return value specified for CreateInsecureServices")
	}

	var r0 domain.RancherServices
	if returnFunc, ok := ret.Get(0).(func(domain.ConfigProvider) domain.RancherServices); ok {
		r0 = returnFunc(configProvider)
	} else {
		r0 = ret.Get(0).(domain.RancherServices)
	}
	return r0
}

// MockRancherServiceFactory_CreateInsecureServices_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateInsecureServices'
type MockRancherServiceFactory_CreateInsecureServices_Call struct {
	*mock.Call
}

// CreateInsecureServices is a helper method to define mock.On call
//   - configProvider domain.ConfigProvider
func (_e *MockRancherServiceFactory_Expecter) CreateInsecureServices(configProvider interface{}) *MockRancherServiceFactory_CreateInsecureServices_Call {
	return &MockRancherServiceFactory_CreateInsecureServices_Call{Call: _e.mock.On("CreateInsecureServices", configProvider)}
}

func (_c *MockRancherServiceFactory_CreateInsecureServices_Call) Run(run func(configProvider domain.ConfigProvider)) *MockRancherServiceFactory_CreateInsecureServices_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 domain.ConfigProvider
		if args[0] != nil {
			arg0 = args[0].(domain.ConfigProvider)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockRancherServiceFactory_CreateInsecureServices_Call) Return(rancherServices domain.RancherServices) *MockRancherServiceFactory_CreateInsecureServices_Call {
	_c.Call.Return(rancherServices)
	return _c
}

func (_c *MockRancherServiceFactory_CreateInsecureServices_Call) RunAndReturn(run func(configProvider domain.ConfigProvider) domain.RancherServices) *MockRancherServiceFactory_CreateInsecureServices_Call {
	_c.Call.Return(run)
	return _c
}

// CreateSecureServices provides a mock function for the type MockRancherServiceFactory
func (_mock *MockRancherServiceFactory) CreateSecureServices(configProvider domain.ConfigProvider) domain.RancherServices {
	ret := _mock.Called(configProvider)

	if len(ret) == 0 {
		panic("no return value specified for CreateSecureServices")
	}

	var r0 domain.RancherServices
	if returnFunc, ok := ret.Get(0).(func(domain.ConfigProvider) domain.RancherServices); ok {
		r0 = returnFunc(configProvider)
	} else {
		r0 = ret.Get(0).(domain.RancherServices)
	}
	return r0
}

// MockRancherServiceFactory_CreateSecureServices_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateSecureServices'
type MockRancherServiceFactory_CreateSecureServices_Call struct {
	*mock.Call
}

// CreateSecureServices is a helper method to define mock.On call
//   - configProvider domain.ConfigProvider
func (_e *MockRancherServiceFactory_Expecter) CreateSecureServices(configProvider interface{}) *MockRancherServiceFactory_CreateSecureServices_Call {
	return &MockRancherServiceFactory_CreateSecureServices_Call{Call: _e.mock.On("CreateSecureServices", configProvider)}
}

func (_c *MockRancherServiceFactory_CreateSecureServices_Call) Run(run func(configProvider domain.ConfigProvider)) *MockRancherServiceFactory_CreateSecureServices_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 domain.ConfigProvider
		if args[0] != nil {
			arg0 = args[0].(domain.ConfigProvider)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockRancherServiceFactory_CreateSecureServices_Call) Return(rancherServices domain.RancherServices) *MockRancherServiceFactory_CreateSecureServices_Call {
	_c.Call.Return(rancherServices)
	return _c
}

func (_c *MockRancherServiceFactory_CreateSecureServices_Call) RunAndReturn(run func(configProvider domain.ConfigProvider) domain.RancherServices) *MockRancherServiceFactory_CreateSecureServices_Call {
	_c.Call.Return(run)
	return _c
}
