// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"
	"cowpoke/internal/domain"

	mock "github.com/stretchr/testify/mock"
)

// NewMockSyncOrchestrator creates a new instance of MockSyncOrchestrator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSyncOrchestrator(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSyncOrchestrator {
	mock := &MockSyncOrchestrator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockSyncOrchestrator is an autogenerated mock type for the SyncOrchestrator type
type MockSyncOrchestrator struct {
	mock.Mock
}

type MockSyncOrchestrator_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSyncOrchestrator) EXPECT() *MockSyncOrchestrator_Expecter {
	return &MockSyncOrchestrator_Expecter{mock: &_m.Mock}
}

// SyncServers provides a mock function for the type MockSyncOrchestrator
func (_mock *MockSyncOrchestrator) SyncServers(ctx context.Context, servers []domain.ConfigServer, passwords map[string]string, filter domain.ClusterFilter) ([]string, error) {
	ret := _mock.Called(ctx, servers, passwords, filter)

	if len(ret) == 0 {
		panic("no return value specified for SyncServers")
	}

	var r0 []string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []domain.ConfigServer, map[string]string, domain.ClusterFilter) ([]string, error)); ok {
		return returnFunc(ctx, servers, passwords, filter)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, []domain.ConfigServer, map[string]string, domain.ClusterFilter) []string); ok {
		r0 = returnFunc(ctx, servers, passwords, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, []domain.ConfigServer, map[string]string, domain.ClusterFilter) error); ok {
		r1 = returnFunc(ctx, servers, passwords, filter)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSyncOrchestrator_SyncServers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SyncServers'
type MockSyncOrchestrator_SyncServers_Call struct {
	*mock.Call
}

// SyncServers is a helper method to define mock.On call
//   - ctx context.Context
//   - servers []domain.ConfigServer
//   - passwords map[string]string
//   - filter domain.ClusterFilter
func (_e *MockSyncOrchestrator_Expecter) SyncServers(ctx interface{}, servers interface{}, passwords interface{}, filter interface{}) *MockSyncOrchestrator_SyncServers_Call {
	return &MockSyncOrchestrator_SyncServers_Call{Call: _e.mock.On("SyncServers", ctx, servers, passwords, filter)}
}

func (_c *MockSyncOrchestrator_SyncServers_Call) Run(run func(ctx context.Context, servers []domain.ConfigServer, passwords map[string]string, filter domain.ClusterFilter)) *MockSyncOrchestrator_SyncServers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []domain.ConfigServer
		if args[1] != nil {
			arg1 = args[1].([]domain.ConfigServer)
		}
		var arg2 map[string]string
		if args[2] != nil {
			arg2 = args[2].(map[string]string)
		}
		var arg3 domain.ClusterFilter
		if args[3] != nil {
			arg3 = args[3].(domain.ClusterFilter)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockSyncOrchestrator_SyncServers_Call) Return(strings []string, err error) *MockSyncOrchestrator_SyncServers_Call {
	_c.Call.Return(strings, err)
	return _c
}

func (_c *MockSyncOrchestrator_SyncServers_Call) RunAndReturn(run func(ctx context.Context, servers []domain.ConfigServer, passwords map[string]string, filter domain.ClusterFilter) ([]string, error)) *MockSyncOrchestrator_SyncServers_Call {
	_c.Call.Return(run)
	return _c
}
